@page "/BasicData/School/Create"
@using WalkingTec.Mvvm.BlazorDemo.ViewModel.BasicData.SchoolVMs;
@using WalkingTec.Mvvm.Demo.Models
@inherits BasePage

<ValidateForm @ref="vform" Model="@Model" OnValidSubmit="@Submit">
    <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">

        <BootstrapInput @bind-Value="@Model.Entity.SchoolCode" />
        <BootstrapInput @bind-Value="@Model.Entity.SchoolName" />
        <Select @bind-Value="@Model.Entity.SchoolType" PlaceHolder="@WtmBlazor.Localizer["Sys.PleaseSelect"]" />
        <BootstrapInput @bind-Value="@Model.Entity.Remark" />
        <WTUploadImage @bind-Value="@Model.Entity.PhotoId" />
        <WTUploadFile @bind-Value="@Model.Entity.FileId" />
    </Row>
</ValidateForm>
<Table TItem="Major"
       IsPagination="true"
       IsStriped="true" IsBordered="true" IsMultipleSelect="true" Items="@Model.Entity.Majors"
       ShowToolbar="true" ShowExtendButtons="true" ShowSkeleton="true"
       AddModalTitle="增加测试数据窗口" EditModalTitle="编辑测试数据窗口"
       EditMode="EditMode.InCell" OnQueryAsync="OnSearch" OnAddAsync="@OnAddAsync" OnSaveAsync="@OnSaveAsync" OnDeleteAsync="@OnDeleteAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.MajorCode" />
        <TableColumn @bind-Field="@context.MajorName" />
        <TableColumn @bind-Field="@context.MajorType" />
    </TableColumns>
</Table>
<div class="modal-footer table-modal-footer">
    <Button Color="Color.Primary" Icon="fa fa-save" Text="@WtmBlazor.Localizer["Sys.Close"]" OnClick="OnClose" />
    <Button Color="Color.Primary" ButtonType="ButtonType.Submit" Icon="fa fa-save" Text="@WtmBlazor.Localizer["Sys.Create"]" IsAsync="true" />
</div>

@code {

    private SchoolVM Model = new SchoolVM();
    private ValidateForm vform { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Model.Entity.Majors = new List<Major>();
        await base.OnInitializedAsync();
    }


    private async Task Submit(EditContext context)
    {
        await PostsForm(vform, "/api/School/add", (s) => "Sys.OprationSuccess");
    }

    public void OnClose()
    {
        CloseDialog();
    }

    private Task<QueryData<Major>> OnSearch(QueryPageOptions opts)
    {
        return Task.FromResult(new QueryData<Major> { Items = Model.Entity.Majors, TotalCount = Model.Entity.Majors.Count });
    }


    private Task<Major> OnAddAsync() => Task.FromResult(new Major());

    private Task<bool> OnSaveAsync(Major item)
    {
        var old = Model.Entity.Majors.Where(x => x.GetID() == item.GetID()).FirstOrDefault();
        if (old == null)
        {
            Model.Entity.Majors.Add(item);
        }
        else
        {
            old = item;
        }
        return Task.FromResult(true);
    }

    private Task<bool> OnDeleteAsync(IEnumerable<Major> items)
    {
        items.ToList().ForEach(i => Model.Entity.Majors.Remove(i));
        return Task.FromResult(true);
    }
}
