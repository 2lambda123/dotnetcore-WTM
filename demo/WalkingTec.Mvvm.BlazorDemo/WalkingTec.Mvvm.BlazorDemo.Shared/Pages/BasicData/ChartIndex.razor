@page "/chart"
@using WalkingTec.Mvvm.BlazorDemo.ViewModel.BasicData.CityVMs;
@inherits BasePage
@attribute [ActionDescription("图表", "WalkingTec.Mvvm.BlazorDemo.Controllers,Chart")]
@*<WTSearchPanel OnSearch="@OnInit2">
        <ValidateForm Model="@SearchModel">
            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">

                <BootstrapInput @bind-Value="@SearchModel.Name" />
            </Row>
        </ValidateForm>
    </WTSearchPanel>*@
<Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Inline">
    <Chart ChartType="ChartType.Line" OnInitAsync="() =>OnInit(title1)" Width="400px"></Chart>
    <Chart ChartType="ChartType.Bubble" OnInitAsync="@OnInit2" />
</Row>
<Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">
    <Chart ChartType="ChartType.Bar" OnInitAsync="() => OnInit(title2)"></Chart>
    <Chart ChartType="ChartType.Pie" OnInitAsync="() => OnInit(title3)"></Chart>
    <Chart ChartType="ChartType.Doughnut" OnInitAsync="() => OnInit(title4)"></Chart>
</Row>

@code{
    private CitySearcher SearchModel = new CitySearcher();
    private Random Randomer { get; } = new Random();
    private List<ChartData> data = new List<ChartData>();
    private string title1 = "Line折线图";
    private string title2 = "bar 柱状图";
    private string title3 = "pie 饼图";
    private string title4 = "pie 圆环";
    private async Task<ChartDataSource> OnInit(string title)
    {
        var data = await WtmBlazor.Api.CallAPI<List<ChartData>>("/api/Chart/GetCharts", HttpMethodEnum.POST, SearchModel);

        var ds = new ChartDataSource();
        ds.Options.Title = title;
        if (data.Data != null && data.Data.Count > 0)
        {
            var cd = data.Data;
            string[] series = cd.Select(x => x.Series).Distinct().ToArray();
            string[] categorys = cd.Select(x => x.Category).Distinct().ToArray();
            var yCount = cd.GroupBy(x => x.Series).ToList();
            ds.Labels = categorys;
            foreach (var item in yCount)
            {
                ds.Data.Add(new ChartDataset()
                {
                    Label = item.Key,
                    Data = item.Select(x => x.Value.ToString())
                });
            }
        }
        return ds;
    }

    private async Task<ChartDataSource> OnInit2()
    {

        var data = await WtmBlazor.Api.CallAPI<List<ChartData>>("/api/Chart/GetCharts", HttpMethodEnum.POST, SearchModel);
        var ds = new ChartDataSource();
        if (data.Data != null && data.Data.Count > 0)
        {
            var cd = data.Data;
            string[] series = cd.Select(x => x.Series).Distinct().ToArray();
            string[] categorys = cd.Select(x => x.Category).Distinct().ToArray();
            var yCount = cd.GroupBy(x => x.Series).ToList();
            ds.Options.Title = "Bubble 折线图";
            foreach (var item in yCount)
            {
                var cateData = item.GroupBy(x => x.Category).ToList();
                ds.Data.Add(new ChartDataset()
                {
                    Label = item.Key,
                    Data = cateData.Select(i => new
                    {
                        x = Randomer.Next(100, 1000),
                        y = i.Where(x => x.Series == item.Key)?.FirstOrDefault().Value,
                        r = i.Where(x => x.Series == item.Key)?.FirstOrDefault().Addition / 50
                    })
                });
            }
        }
        return ds;
    }
}
