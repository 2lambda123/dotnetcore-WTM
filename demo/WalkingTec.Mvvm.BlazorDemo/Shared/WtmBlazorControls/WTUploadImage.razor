@namespace WtmBlazorControls
@inherits WTComponent
@inject WtmBlazorContext WtmBlazor
@using System.Threading;
@using System.IO;
<AvatarUpload @ref="uploader" @bind-Value="FileID" Accept="image/*" IsSingle="!IsMultiple" ShowProgress="true" OnChange="@OnAvatarUpload" OnDelete="@OnAvatarDelete" ShowLabel="@ShowLabel" DisplayText="@LabelText" DefaultFileList="@dlist"></AvatarUpload>

@code{

    [Parameter]
    public int? ThumbWidth { get; set; }
    [Parameter]
    public int? ThumbHeight { get; set; }
    [Parameter]
    public Guid? FileID { get; set; }
    [Parameter]
    public EventCallback<Guid?> FileIDChanged { get; set; }
    [Parameter]
    public bool IsMultiple { get; set; }
    [Parameter]
    public bool ShowLabel { get; set; } = true;
    [Parameter]
    public string LabelText { get; set; } = "";

    private Dictionary<string, string> files { get; set; } = new Dictionary<string, string>();
    private List<UploadFile> dlist = new List<UploadFile>();
    private AvatarUpload<Guid?> uploader { get; set; }
    private bool FileSet { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (FileID != null && FileSet == false)
        {
            dlist.Add(new UploadFile
            {
                PrevUrl = $"https://static.699pic.com/images/index/right-bottom-ewm3.jpg"
            });
            FileSet = true;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task OnAvatarUpload(UploadFile file)
    {
        bool suc = false;
        if (file != null && file.File != null)
        {
            var format = file.File.ContentType;
            if (CheckValidAvatarFormat(format))
            {

                byte[] filedata = await GetFileData(file.File);
                var rv = await WtmBlazor.Api.CallAPI<DynamicData>("/api/_file/UploadImage", HttpMethodEnum.POST, new Dictionary<string, string> {
                    {"width", ThumbWidth?.ToString() },
                    {"height", ThumbHeight?.ToString() }
                }, filedata, file.File.Name);
                if (rv.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    files.Add(rv.Data.Fields["Id"].ToString(), file.File.Name);
                    if (IsMultiple)
                    {
                        //await FileIDChanged.InvokeAsync(files.Select(x => x.Key).Cast<Guid?>().ToList());
                    }
                    else
                    {
                        await FileIDChanged.InvokeAsync(new Guid(files.First().Key));
                    }
                    suc = true;
                }
                await file.RequestBase64ImageFileAsync(format, 400, 300);
            }

        }
        if (suc == false)
        {
            await WtmBlazor.Toast.Error(content: WtmBlazor.Localizer["Sys.UploadFailed"]);
        }

    }

    private async Task<bool> OnAvatarDelete(string filename)
    {
        var idstr = files.Where(x => x.Value == filename).Select(x => x.Key).FirstOrDefault();
        if (idstr != null)
        {
            var rv = await WtmBlazor.Api.CallAPI($"/api/_file/DeletedFile/{idstr}");
            files.Remove(idstr);
        }
        return true;
    }

    private bool CheckValidAvatarFormat(string format)
    {
        return "jpg;png;bmp;gif;jpeg".Split(';').Any(f => format.Contains(f, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<byte[]> GetFileData(IBrowserFile file)
    {
        using var fileStream = file.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        byte[] rv = memoryStream.ToArray();
        memoryStream.Dispose();
        fileStream.Dispose();
        return rv;
    }
}
