@namespace WtmBlazorControls
@inherits WTComponent
@inject WtmBlazorContext WtmBlazor
@using System.Threading;
@using System.Linq.Expressions;
@using System.IO;
@typeparam TValue


<AvatarUpload @ref="uploader" Value="Value" ValueExpression="ValueExpression" ValueChanged="ValueChanged" Accept="image/*" IsSingle="!IsMultiple" ShowProgress="true" OnChange="@OnAvatarUpload"
              OnDelete="@OnAvatarDelete"  DisplayText="@LabelText" DefaultFileList="@dlist"></AvatarUpload>

@code{

    [Parameter]
    public int? ThumbWidth { get; set; }
    [Parameter]
    public int? ThumbHeight { get; set; }
    [Parameter]
    public TValue Value { get; set; }
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter]
    public bool IsMultiple { get; set; }
    [Parameter]
    public bool ShowLabel { get; set; } = true;
    [Parameter]
    public string LabelText { get; set; } = null;

    private Dictionary<string, string> files { get; set; } = new Dictionary<string, string>();
    private List<UploadFile> dlist = null;
    private AvatarUpload<TValue> uploader { get; set; }
    private bool FileSet { get; set; } = false;

    protected TValue CurrentValue
    {
        get => Value;
        set
        {
            var hasChanged = !EqualityComparer<TValue>.Default.Equals(value, Value);
            if (hasChanged)
            {
                Value = value;
                _ = ValueChanged.InvokeAsync(value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (Value != null)
        {
            var rv = await WtmBlazor.Api.CallAPI<byte[]>($"/api/_file/GetFile/{Value}", HttpMethodEnum.GET, new Dictionary<string, string> {
                    {"width", ThumbWidth?.ToString() },
                    {"height", ThumbHeight?.ToString() }
                });
            if (rv.StatusCode == System.Net.HttpStatusCode.OK)
            {
                dlist.Add(new UploadFile
                {
                    PrevUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(rv.Data)}"
                });
            }
        }
        await base.OnInitializedAsync();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (Value != null && FileSet == false)
    //    {
    //        dlist.Add(new UploadFile
    //        {
    //            PrevUrl = $"https://static.699pic.com/images/index/right-bottom-ewm3.jpg"
    //        });
    //        FileSet = true;
    //        StateHasChanged();
    //    }
    //    await base.OnAfterRenderAsync(firstRender);
    //}


    private async Task OnAvatarUpload(UploadFile file)
    {
        bool suc = false;
        if (file != null && file.File != null)
        {
            var format = file.File.ContentType;
            if (CheckValidAvatarFormat(format))
            {

                byte[] filedata = await GetFileData(file.File);
                var rv = await WtmBlazor.Api.CallAPI<DynamicData>("/api/_file/UploadImage", HttpMethodEnum.POST, new Dictionary<string, string> {
                    {"width", ThumbWidth?.ToString() },
                    {"height", ThumbHeight?.ToString() }
                }, filedata, file.File.Name);
                if (rv.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    files.Add(rv.Data.Fields["Id"].ToString(), file.File.Name);
                    if (IsMultiple)
                    {
                        //await FileIDChanged.InvokeAsync(files.Select(x => x.Key).Cast<Guid?>().ToList());
                    }
                    else
                    {
                        CurrentValue = (TValue)(object)(new Guid(files.First().Key));
                    }
                    suc = true;
                }
                await file.RequestBase64ImageFileAsync(format, 400, 300);
            }

        }
        if (suc == false)
        {
            await WtmBlazor.Toast.Error(content: WtmBlazor.Localizer["Sys.UploadFailed"]);
        }

    }

    private async Task<bool> OnAvatarDelete(string filename)
    {
        var idstr = files.Where(x => x.Value == filename).Select(x => x.Key).FirstOrDefault();
        if (idstr != null)
        {
            var rv = await WtmBlazor.Api.CallAPI($"/api/_file/DeletedFile/{idstr}");
            files.Remove(idstr);
        }
        return true;
    }

    private bool CheckValidAvatarFormat(string format)
    {
        return "jpg;png;bmp;gif;jpeg".Split(';').Any(f => format.Contains(f, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<byte[]> GetFileData(IBrowserFile file)
    {
        using var fileStream = file.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        byte[] rv = memoryStream.ToArray();
        memoryStream.Dispose();
        fileStream.Dispose();
        return rv;
    }
}
