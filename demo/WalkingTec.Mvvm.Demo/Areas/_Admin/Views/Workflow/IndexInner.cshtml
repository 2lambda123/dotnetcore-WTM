<link rel="icon" type="image/png" sizes="32x32"
      href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16"
      href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-16x16.png">
<link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/fonts/inter/inter.css">
<link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.css">
<script src="/_content/Elsa.Designer.Components.Web/monaco-editor/min/vs/loader.js"></script>
<script type="module" src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>
<script type="module"
        src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>


<elsa-studio-root server-url="@($"{Context.Request.Scheme}://{Context.Request.Host}")"
                  monaco-lib-path="_content/Elsa.Designer.Components.Web/monaco-editor/min" culture="zh-CN">
    <elsa-studio-dashboard></elsa-studio-dashboard>
</elsa-studio-root>

@* <elsa-studio-workflow-definitions-list>

    </elsa-studio-workflow-definitions-list>
    <elsa-confirm-dialog class="hydrated">
    <elsa-modal-dialog class="hidden elsa-block hydrated">

    </elsa-modal-dialog>
    </elsa-confirm-dialog>
    <elsa-studio-dashboard culture="zh-CN"></elsa-studio-dashboard>*@
<script src="/jquery.min.js"></script>
<script>
    function MyPlugin() {        
    }

    function WtmApprovePlugin(elsaStudio) {
        const {
            eventBus
        } = elsaStudio;

        eventBus.on('activity-design-displaying', context => {

            const activityModel = context.activityModel;

            // Only handle SayHelloWorld activities.
            if (activityModel.type !== 'WtmApproveActivity')
                return;
            const props = activityModel.properties || [];
            const syntax = 'Json';

            // Get the value stored in the `PossibleOutcomes` property.
            // Keep in mind that activity properties are stored in a dictionary of expressions, keyed by syntax.
            const possibleOutcomes = props.find(x => x.name == 'PossibleOutcomes') || {
                expressions: {
                    'Json': '[]'
                },
                syntax: syntax
            };
            const expression = possibleOutcomes.expressions[syntax] || [];

            // Set the outcomes property of the `context` argument to the list of possible outcomes.
            // Due to the way expressions are serialized depending on the syntax used, we need to check for a couple of formats in order to get the array.
            context.outcomes = !!expression['$values'] ? expression['$values'] : Array.isArray(expression) ?
                expression : JSON.parse(expression) || [];
        });
    }

    function DropdownPlugin(elsaStudio) {
        const {
            eventBus
        } = elsaStudio;
        eventBus.on("activity-editor-rendering", context => {
            console.log(context);
            if (context.activityDescriptor.type != 'SayHelloWorld')
                return;
            console.log(document.querySelector('#user'));

            $.get("/Flow/FlowInfo/GetFrameworkUsers", function (r) {
                if (r === undefined || r === null) {
                    return;
                }
                var optionHtml = [];
                if (r.code == 200 && r.data != undefined && r.data.length > 0) {
                    for (var i = 0; i < r.data.length; i++) {
                        //optionHtml+='<option value="'+r.data[i].value+'">'+r.data[i].text+'</option>';

                        optionHtml.push({ text: r.data[i].text, value: r.data[i].value });
                    }
                }
                //document.querySelector('#user').setHTML('');
                //document.querySelector('#user').setHTML(optionHtml);
                var userC = context.activityDescriptor.inputProperties.find(({ name }) => name === 'user');
                userC.options.items = optionHtml;

                console.log(userC);

            });


        });


    }


    const elsaStudioRoot = document.querySelector('elsa-studio-root');

    elsaStudioRoot.addEventListener('initializing', e => {
        const elsaStudio = e.detail;
        elsaStudio.pluginManager.registerPlugin(WtmApprovePlugin);
        elsaStudio.pluginManager.registerPlugin(DropdownPlugin);
    });
</script>
